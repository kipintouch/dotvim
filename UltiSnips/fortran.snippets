priority -50

######################################
#  Some Simple Snippets For Fortran  #
######################################

######################################
# Function and Data type Declaration #
######################################
# Main Program
snippet main "The Main Program" b
program main
	implicit none
	!${1: Some Description about main}
	$0
end program main
endsnippet
# Program In General
snippet prog "Writting a Program" b
program ${1:prog_name}
	implicit none
	!${2: Some Description about your Program}
	$0
end program $1
endsnippet
# function shorthand
snippet fun "function shorthand" b
${1:return_type }function ${2:function-name} (${3:Arg_list}) ${4:results(${5:var})}
	!${6: Some Description about your function}
	$0
end function $2
endsnippet
# Subroutine shorthand
snippet sub "Subroutine shorthand" b
subroutine ${1:sub-name} (${2:Arg_list})
	!${3: Some Description about your subroutine}
	$0
end subroutine $1
endsnippet
# Type Declaration
snippet ty "Declaring a type" b
type ${1:type-name}
	! ${2:Some Description about your type}
	$0
end type $1
endsnippet
# Module In General
snippet mod "Basic Module Constructor" b
module ${1:mod_name}
	IMPLICIT NONE
	!${2: Some Description about your Program}
end module $1
endsnippet
# Interface for Module
snippet inte "Interface Constructor" b
interface ${1:interface_name}
	module procedure ${2:interface_name}
end interface $1
endsnippet
# Procedure Refrence name for modules
snippet vproc "New Name Refrence a Procedure within Modules" b
procedure :: ${1:NEW_NAME} => ${2:ORIGINAL_NAME}
endsnippet

####################################################
# Basic constructs if else, do end do, switch etc. #
####################################################
# IF
snippet if "simple if condition" b
if (${1:cond}) then
	${2:If_True}
end if
endsnippet
# IF Else
snippet ife "simple if condition" b
if (${1:cond}) then
	${2:If_true}
else
	${3:Else}
end if
endsnippet
# simple do
snippet do "Simple Do-construct" b
do ${1:i} = ${2:start}, ${3:end}
	${4:loop}
end do
endsnippet
# do with incremental control
snippet doi "Do-construct with Increment Control" b
do ${1:i} = ${2:start}, ${3:end}, ${4:increment-decrement}
	${5:loop}
end do
endsnippet
# do while
snippet dow "Do-While Construct" b
do while(${1:Conditions})
	${2:Do Something}
end do ! while
endsnippet
snippet wr "write(*, *) function" b
write(*, ${1:*}) ${2:"${3:HelloWorld}"}${4:, }
endsnippet
# Case Construct
snippet cc "Case Statement" b
case (${1:COND})
	${2:do something}
endsnippet
snippet scase "Case Block Constructor" b
select case (${1:input})
	case (${2:COND})
		${3:do something}
	case default
		${4:default_work}
end select
endsnippet

#########################
# Variale Declaration!! #
#########################
# Integer
snippet vin "Declaring a Integer" b
integer :: ${1:var}
endsnippet
# Character
snippet vch "Declaring a Integer" b
character (len=${1:*}):: ${2:var}
endsnippet
# Logical
snippet vlog "Declaring a Integer" b
logical :: ${1:var}
endsnippet
# Float
snippet vre "Declaring a Integer" b
real :: ${1:var}
endsnippet
# Float
snippet vty "Declaring a variable of type" b
type(${1:type}) :: ${2:var}
endsnippet
# Double
snippet vdb "Declaring a Double of Type" b
double precision :: ${1:var}
endsnippet

######################################################################################
# Variables / Type shorthand   for subroutines and functions (intent) in, out, inout #
######################################################################################
# Integer var in Subroutines
snippet sin "Subroutine Declaring a Integer" b
integer, intent(${1:in}) :: ${2:int_var}
endsnippet
# Character var in Subroutines
snippet sch "Subroutine Declaring a Integer" b
character, intent(${1:in}) :: ${2:char_var}
endsnippet
# Logical var in Subroutines
snippet slog "Subroutine Declaring a Integer" b
logical, intent(${1:in}) :: ${2:logical_var}
endsnippet
# Float var in Subroutines
snippet sre "Subroutine Declaring a Integer" b
real, intent(${1:in}) :: ${2:real_var}
endsnippet
# Declaring type in subroutines
snippet sty "Subroutine Declaring a type" b
type(${1:type}), intent(${2:in}) :: ${3:type_var}
endsnippet
# Declaring type array in subroutines
snippet saty "Subroutine Declaring a type array" b
type({$1:type}), dimension(${2:dim}), ${3:allocatable,} intent(${4:in}) :: ${5:type_array}
endsnippet
# Declaring integer array in subroutines
snippet sain "Subroutine Declaring a integer array" b
integer, dimension(${1:dim}), ${2:allocatable,} intent(${3:in}) :: ${4:int_array}
endsnippet
# Declaring real array in subroutines
snippet sare "Subroutine Declaring a integer array" b
real, dimension(${1:dim}), ${2:allocatable,} intent(${3:in}) :: ${4:real_array}
endsnippet
# Declaring Double array in subroutines
snippet sadb "Subroutine Declaring a Double array" b
double precision, dimension(${1:dim}), ${2:allocatable,} intent(${3:in}) :: ${4:double_array}
endsnippet
# Declaring integer array in subroutines
snippet salog "Subroutine Declaring a integer array" b
logical, dimension(${1:dim}), ${2:allocatable,} intent(${3:in}) :: ${4:logical_array}
endsnippet

#####################
# Array Declaration #
#####################
# Declaring integer array
snippet ain "Declaring a integer array" b
integer, ${1:allocatable,} dimension(${2:dim}) :: ${3:int_array}
endsnippet
# Declaring real array
snippet are "Declaring a real array" b
real, ${1:allocatable,} dimension(${2:dim}) :: ${3:real_array}
endsnippet
# Declaring Character Array
snippet ach "Declaring a character array" b
character(len=${1:len}), ${2:allocatable,} dimension(${3:dim}) :: ${4:char_array}
endsnippet
# Declaring type Array
snippet aty "Declaring a type array" b
type({$1:type}), ${2:allocatable,} dimension(${3:dim}) :: ${4:type_array}
endsnippet
# Double Array var in Subroutines
snippet adb "Declaring a Double" b
double precision, ${1:allocatable,} dimension(${2:dim}) :: ${3:double_array}
endsnippet
# logical Array var in Subroutines
snippet alog "Declaring a logical" b
logical, ${1:allocatable,} dimension(${2:dim}) :: ${3:double_array}
endsnippet

##################
#    Pointers    #
##################
snippet pin "Declares a Integer Parameter" b
integer, pointer :: ${1:int_pointer} ${2:=> null()}
endsnippet
snippet pre "Declares a Integer Parameter" b
real, pointer :: ${1:real_pointer} ${2:=> null()}
endsnippet
snippet pdb "Declares a Integer Parameter" b
double precision, pointer :: ${1:double_pointer} ${2:=> null()}
endsnippet
snippet pty "Declares a pointer variable" b
${1:type}, pointer :: ${2:type_pointer} ${3:=> null()}
endsnippet
