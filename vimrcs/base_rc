" vim: fdm=marker:et:ts=2:sw=2:sts=2

" Initialization:                                                    " {{{1
  " Map Leader
  let mapleader   = ','
  let g:mapleader = ','
  " Term Configuration
  let s:colorful_term = (&term =~ "xterm") || (&term =~ "screen")
  " OS Information
  let s:running_windows  = has("win16") || has("win32") || has("win64")
  let s:running_terminal = !has('gui_running')
  let s:place            = g:local_settings_place
  let s:vimfiles         = ""
  if s:running_windows
    let s:vimfiles = "$VIM/vimfiles/"
  else
    let s:vimfiles = "~/.vim/"
  endif
  " Xterm2 -- Odd Config
  set ttymouse=xterm2 " makes it work in everything
"}}}1
" Basis:                                                             " {{{1
  " set noexrc        " don't use local version of .(g)vimrc, .exrc
  set nocompatible    " explicitly get out of vi-compatible mode
  set cpoptions=aABceFsmq
  " q̅:̅ When joining lines, leave the cursor between joined lines
  " m̅:̅ When a new match is created (showmatch) pause for .5
  " s̅:̅ Set buffer options when entering the buffer
  " F̅:̅ :write command updates current file name automatically add <CR> to
  "    the last line when using :@r
  " e̅:̅
  " c̅:̅ Searching continues at the end of the match at the cursor position
  " B̅:̅ A backslash has no special meaning in mappings
  " A̅:̅ :write updates alternative file name
  " a̅:̅ :read updates alternative file name
  if s:running_windows
    let g:skip_loading_mswin=1 " Just in case :)
  endif
"}}}1
" Newish:                                                            " {{{1
  set history=9999   " big old history
  " super low delay
  set timeout timeoutlen=1000 ttimeoutlen=100
  set viminfo+=!     " Store upper-case registers in viminfo
  " set nomore         " Short nomore and bullets, too
  set formatlistpat=^\\s*\\(\\d\\\|[-*]\\)\\+[\\]:.)}\\t\ ]\\s*
"}}}1
" General:                                                           " {{{1
  filetype plugin indent on      " load filetype plugins/indent settings
  " set autochdir                  " always switch to the current file directory
  set backspace=indent,eol,start " make backspace a more flexible
  if s:running_windows           " share System clipboard. Will not work in X11
    set clipboard+=unnamed
  else
    set clipboard+=unnamedplus
  endif
  set noswapfile
  set hidden                   " you can change buffers without saving
  " (XXX: #VIM/tpope warns the line below could break things)
  set iskeyword+=_,$,@,%,# " none of these are word dividers
  set mouse+=a             " use mouse everywhere
  set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
  " ]̅         Insert and Replace
  " [̅         Insert and Replace
  " ~̅         Normal
  " <̅R̅i̅g̅h̅t̅>̅   Normal and Visual
  " <̅L̅e̅f̅t̅>̅    Normal and Visual
  " l̅         Normal and Visual (not recommended)
  " h̅         Normal and Visual (not recommended)
  " <̅S̅p̅a̅c̅e̅>̅   Normal and Visual
  " <̅B̅S̅>̅      Normal and Visual
  set wildmenu " turn on command line completion wild style
  set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png
  " ignore these list file extensions
  " set wildmode=full (Default) | set wildmode=list:longest " turn on wild
  " mode huge list
"}}}1
" VIM UI:                                                            " {{{1
  " set list " we do what to show tabs, to ensure we get them out of my files
  set nohlsearch               " Do not highlight searched for phrases
  set incsearch                " BUT do highlight as you type your
                               " search phrase
  set lazyredraw               " do not redraw while running macros
  set linespace=0              " don't insert any extra pixel lines
                               " betweens rows
  set listchars=tab:>-,trail:- " Show tabs and trailing
  set nostartofline            " Leave my cursor where it was
  set number                   " Turn on line numbers
  set numberwidth=6            " We are good up to 99999 lines
  set report=0                 " Tell us when anything is changed via
                               " :...
  set ruler                    " Always show current positions along
                               " the bottom
  set scrolloff=10             " Keep 10 lines (top/bottom) for scope
  set shortmess=aOstT          " Shortens messages to avoid 'press a
                               " key' prompt (Default: filnxtToO)
  set showcmd                  " Show the command being typed
  set showmatch                " Show matching brackets
  set matchtime=2              " How many tenths of a second to blink
                               " when matching brackets
  set sidescrolloff=10         " Keep 5 lines at the size
  set autoread                 " Set to auto read when a file is
                               " Changed from the outside
  try
    set switchbuf=useopen,usetab,newtab
    " set stal=2 " Show Tablines
  catch
  endtry
  set noerrorbells novisualbell t_vb= " No Annoying Sounds
  " Format the status line. Skip for Airline                         " {{{2
  if !exists('g:loaded_airline')
    " HasPaste Function
    set laststatus=2 " always show the status line
    function! HasPaste()
      if &paste
        return 'PASTE MODE  '
      else
        return ''
      endif
    endfunction
    set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ \ Col:\ %c
    "         %̅c̅:̅ column Nr.
    "         %̅h̅:̅ line Nr.
    "         %̅h̅:̅ Help Flag for current File
    "   g̅e̅t̅c̅w̅d̅(̅)̅:̅ Current Working Directory
    "         %̅r̅:̅ ReadOnly Flag
    "         %̅w̅:̅ Preview Flag in Square Brackets
    "         %̅h̅:̅ Help Flag for current File
    "         %̅r̅:̅ ReadOnly Flag
    "         %̅m̅:̅ rodified flag in square brackets
    "         %̅F̅:̅ Full Path
    " H̅a̅s̅P̅a̅s̅t̅e̅(̅)̅:̅ Paste Toggle
  endif"}}}2
"}}}1
" Text Formatting:                                                   " {{{1
  " set completeopt=menuone " don't use a pop up menu for completions
  set nowrap            " do not wrap line
  set formatoptions=rq  " Automatically insert comment leader on return, and let gq format comments
  set formatoptions+=nt " Recognize numbered lists and auto-wrap
  set ignorecase        " case insensitive by default
  set infercase         " case inferred by default
  set shiftround        " when at 3 spaces, and I hit > ... go to 4, not 5
  set smartcase         " if there are caps, go case-sensitive
  set shiftwidth=2      " auto-indent amount when using cindent, >>, << and stuff like that
  set expandtab         " no real tabs please!
  set softtabstop=2     " when hitting tab or backspace, how many spaces should a tab be (see expandtab)
  set tabstop=2         " real tabs should be 8, and they will show with set list on
  set autoindent        " Auto Indent
  set smartindent       " Smart Ident
  set wrap              " Wrap Lines
  set wrapmargin=0      " Controls when to wrap based on terminal size
  set cursorline        " Set CursorLine
  set cmdheight=2       " Setting Command-Pane Height
  set textwidth=120     " Textwidth
  " Work--In Progress Yet to do Temp-Directories
  set nobackup         " No Backup File
  set nowritebackup    " No WriteBackUP
  set noswapfile       " No SwapFile
"}}}1
" Folding:                                                           " {{{1
  " Turn on folding
  set foldenable
  " Foldmethod Unset for Unusual Behaviour for other filetypes
  set foldmethod=marker
  set foldlevel=0
  " Don't autofold anything (but I can still fold manually) what movements
  " open folds
  set foldopen=block,hor,mark,percent,quickfix,tag
  " Custom fold text function (cleaner than default)                 " {{{2
    " Important to keep function Global
    function! CustomFoldText()
      "get first non-blank line
      let fs = v:foldstart
      while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
      endwhile
      if fs > v:foldend
        let line = getline(v:foldstart)
      else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
      endif
      let w               = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
      let foldSize        = 1 + v:foldend - v:foldstart
      let foldSizeStr     = " " . foldSize . " lines "
      let foldLevelStr    = repeat("+--", v:foldlevel)
      let lineCount       = line("$")
      let foldPercentage  = printf("[%.1f",(foldSize*1.0)/lineCount*100)."%] "
      let expansionString =
      \ repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
      return  line . expansionString . foldSizeStr .
              \ foldPercentage . foldLevelStr
    endf
    set foldtext=CustomFoldText()
"}}}1
" GUI:                                                               " {{{1
  if has("gui_running")                                              " {{{2
    set guioptions-=T
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set guioptions-=t
    set t_Co=256
    set guitablabel=%M\ %t
    " Requried Specifically for GVIM for bells | noise
    autocmd GUIENTER  * set vb t_vb=
    " set background=light
    colorscheme codeschool
    if s:running_windows " Working on GUI_FONT
      set guifont=Source_Code_Pro_Medium:h10:cANSI,Source_Code_Pro_Semibold:h10:cANSI,Source_Code_Powerline:h10:b:cANSI,Consolas\ for\ Powerline\ FixedD:h10,Ubuntu\ Mono\ derivative\ Powerline:h10,Monaco\ for\ Powerline:h10,DejaVu_Sans_Mono_for_Powerline:h10:i:cANSI
    else
      set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 8,Ubuntu\ Mono\ derivative\ Powerline\ 9,Anonymice\ Powerline\ 9,monofur\ for\ Powerline\ 9,DejaVu\ Sans\ Mono\ for\ Powerline\ 9,Inconsolata\ for\ Powerline\ 9,Sauce\ Code\ Pro\ 9,Sauce\ Code\ Pro\ Light\ 9,Sauce\ Code\ Pro\ Semibold\ 9,Sauce\ Code\ Pro\ Medium\ 9,Sauce\ Code\ Pro\ Black\ 9,Sauce\ Code\ Pro\ ExtraLight\ 9,Droid\ Sans\ Mono\ for\ Powerline
    endif
    set guicursor+=n-v-c:blinkon0
    nnoremap <A-Up> :silent! let &guifont = join(
      \ split(&guifont, ',')[1:], ',') . ',' .
      \ split(&guifont, ',')[0]<CR> \| :echom split(&guifont, ',')[0]<CR>
    nnoremap <C-Up> :silent! let &guifont = substitute(
      \ &guifont,
      \ '[:h]*\zs\d\+',
      \ '\=eval(submatch(0)+1)',
      \ 'g')<CR> \| :echom split(&guifont, ',')[0]<CR>
    nnoremap <C-Down> :silent! let &guifont = substitute(
      \ &guifont,
      \ '[:h]*\zs\d\+',
      \ '\=eval(submatch(0)-1)',
      \ 'g')<CR> \| :echom split(&guifont, ',')[0]<CR>
  else " *ONLY ON LINUX* Term Color Settings                         " {{{2
    if s:colorful_term                                               " {{{3
      " 256 color --
      " let &t_Co=256
      " Restore screen after quitting
      if has("terminfo")
        let &t_Sf="\ESC[3%p1%dm"
        let &t_Sb="\ESC[4%p1%dm"
      else
        let &t_Sf="\ESC[3%dm"
        let &t_Sb="\ESC[4%dm"
      endif
      " Color Settings required before setting colorschemes
      let g:gruvbox_italicize_comments = 0
      let g:solarized_termcolors       = 256
      " colorscheme solarized
      colorscheme dracula
    else
      colorscheme desert
    endif "}}}3
    if &term =~ '^screen'                                            " {{{3
      " Page keys http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/FAQ
      execute "set t_kP=\e[5;*~"
      execute "set t_kN=\e[6;*~"
      " Arrow keys http://unix.stackexchange.com/a/34723
      execute "set <xUp>=\e[1;*A"
      execute "set <xDown>=\e[1;*B"
      execute "set <xRight>=\e[1;*C"
      execute "set <xLeft>=\e[1;*D"
      " echom "Using Tmux Settings"
    endif "}}}3
  endif
"}}}1
" File Encoding:                                                     " {{{1
  " Set utf8 as standard encoding and en_US as the standard language " {{{2
  if has("multi_byte")
    if &termencoding == ""
      let &termencoding = &encoding
    endif
    " Setting File Encoding VIM POWERLINE
    set encoding=utf-8
    setglobal fileencoding=utf-8
    "setglobal bomb
    set fileencodings=ucs-bom,utf-8,latin1
  else
    set encoding=utf8
  endif
  " Use Unix as the standard file type                               " {{{2
  if s:running_windows
    set ffs=dos,unix,mac
  else
    set ffs=unix,dos,mac
  endif
" }}}1
" HELP FUNCTIONS:                                                    " {{{1
  " Match Extra White Spaces                                         " {{{2
  function! <SID>MatchExtraWhitespaces()
    " echom "MATCHING WHITESPACES"
    if    &ft ==# 'unite'   || &ft ==# 'startify' ||
      \   &ft ==# 'tagbar'  || &ft ==# 'qf'       ||
      \   &ft ==# 'help'    || &ft ==# ''
      " echom 'Match Whitespaces Excluding: ' . string(&ft)
      return
    else
      " echom 'Match Whitespaces Including: ' . string(&ft)
      highlight ExWhSpace ctermbg=06 ctermfg=blue guibg=#008080 guifg=blue
      call matchadd('ExWhSpace', '\s\+$', 101)
      return
    endif
  endfunction

  " Match ColorColumn                                                " {{{2
  function! <SID>ColorColumnSetting()
    if  &ft ==# 'unite' || &ft ==# 'json'     ||
      \ &ft ==# 'help'  || &ft ==# 'qf'       ||
      \ &ft ==# 'text'  || &ft ==# 'markdown' ||
      \ &ft ==# ''
      " echom "Exclude FT Detected: " . string(&ft)
      return
    else
      " echom 'ColorColumn Detected: ' . string(&ft)
      " highlight! link ColorColumn ErrorMsg
      setlocal colorcolumn=+1
    endif
  endf

  " HL NEXT                                                          " {{{2
  function! <SID>HLNext(blinktime)
    highlight WhiteOnRed ctermfg=red ctermbg=white cterm=bold
    if has("gui_running")
      highlight WhiteOnRed guifg=red guibg=white gui=bold
    endif
    for l:ln in range(5)
      let [bufnum, lnum, col, off] = getpos('.')
      let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
      let target_pat = '\c\%#'.@/
      " let ring_pat = (lnum > 1 ? '\%'.(lnum-1).'l\%>'              " {{{3
      "       \ . max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.\|' : '')
      "       \ . '\%'.lnum.'l\%>'.max([col-4,1]) .'v\%<'.col.'v.'
      "       \ . '\|'
      "       \ . '\%'.lnum.'l\%>'.max([col+matchlen-1,1])
      "       \ . 'v\%<'.(col+matchlen+3).'v.'
      "       \ . '\|'
      "       \ . '\%'.(lnum+1).'l\%>'.max([col-4,1])
      "       \ . 'v\%<'.(col+matchlen+3).'v.'"}}}3
      let ring = matchadd('WhiteOnRed', target_pat, 101)
      redraw
      exec 'sleep ' . float2nr(a:blinktime * 100) . 'm'
      call matchdelete(ring)
      redraw
    endfor
  endfunction
  " Remove White Spaces                                              " {{{2
  function! <SID>Remove_ExtraWhiteSpace()
    " save last search & cursor position
    let l:_s=@/
    let l:l = line(".")
    let l:c = col(".")
    if &ft == 'unite' || &ft == 'startify'
      return
    else
      %s/\s\+$//e
      let @/=l:_s
      call cursor(l:l, l:c)
    endif
  endfunction
  " Help Function to capture output of ex commands                   " {{{2
  let g:tab_messages = ""
  function! TabMessage(cmd)
    redir => g:tab_messages
    silent execute a:cmd
    redir END
    " tabnew
    " silent put=message
    " set nomodified
  endfunction
  " Toggle Numbers in Vim                                            " {{{2
  " function! NumberToggle()
  "   if  &ft ==# 'unite' || &ft ==# ''   ||
  "     \ &ft ==# 'help'  || &ft ==# 'qf'
  "     return
  "   else
  "     if(&relativenumber == 1)
  "       set relativenumber!
  "       set number
  "     else
  "       set number!
  "       set relativenumber
  "     endif
  "   endif
  " endfunction
  " Some Text Formatting:                                            " {{{2
  "  Overline 0305 Underline 0332 DoubleUnderline 0333 Strikethrough 0336
  function! <SID>Combine_line(my_line, cp)                           " {{{3
    execute 'let l:char = "\u'.a:cp.'"'
    let l:initial = matchstr(getline(a:my_line),'\v^\s*'.b:cmt.'?\s*')
    let l:str_val = substitute(substitute(getline(a:my_line),
                  \   '\v(^\s*)('.b:cmt.'?\s*)(.*)','\3', ''),
                  \   '[^[:cntrl:]]', '&'.l:char, 'g')
    call setline(a:my_line, l:initial . l:str_val)
  endfunction
  function! <SID>Combine_select(cp)range                             " {{{3
    execute 'let l:char = "\u'.a:cp.'"'
    for l:line in range(a:firstline, a:lastline)
      let l:initial = matchstr(getline(l:line),'\v^\s*'.b:cmt.'?\s*')
      let l:str_val = substitute(substitute(getline(l:line),
                    \   '\v(^\s*)('.b:cmt.'?\s*)(.*)','\3', ''),
                    \   '[^[:cntrl:]]', '&'.l:char, 'g')
      call setline(l:line, l:initial . l:str_val)
    endfor
  endfunction
  function! <SID>Del_combine_line()                                  " {{{3
    let l:saved_cpo = &cpo
    let l:saved_reg = @@
    let l:pos       = getpos('.')
    normal! g_
    let c1 = virtcol('.')
    normal! 0
    let c0 = virtcol('.')
    if &delcombine
      set nodelcombine
    endif
    set delcombine
    for i in range(c0, c1)
      redir => l:value
      silent execute "normal! g8"
      redir END
      let l:combine = strlen(matchstr(l:value, '+')) > 0 ? 1 : 0
      if l:combine
        normal! x
        normal! l
      else
        normal! l
      endif
    endfor
    set nodelcombine
    let &cpo = l:saved_cpo
    let @@   = l:saved_reg
    call setpos('.', l:pos)
  endfunction
  function! <SID>Del_combine_selection()range                        " {{{3
    let l:saved_cpo = &cpo
    let l:saved_reg = @@
    let l:pos       = getpos('.')
    if &delcombine
      set nodelcombine
    endif
    set delcombine
    for l:myline in range(a:firstline, a:lastline)
      execute "normal! " . string(l:myline) . "G"
      normal! g_
      let c1 = virtcol('.')
      normal! 0
      let c0 = virtcol('.')
      " echom "Line: " . string(l:myline) . " | " .
      "     \ "COL0: " . string(c0) . " | COL1: " . string(c1)
      for i in range(c0, c1)
        redir => l:value
        silent execute "normal! g8"
        redir END
        let l:combine = strlen(matchstr(l:value, '+')) > 0 ? 1 : 0
        if l:combine
          normal! x
          normal! l
        else
          normal! l
        endif
      endfor
    endfor
    set nodelcombine
    let &cpo = l:saved_cpo
    let @@   = l:saved_reg
    call setpos('.', l:pos)
  endfunction

  " Close All But This Buffer On A Tab Original BufOnly:             " {{{2
  function! <SID>BufOnly()
    " let l:buffer = bufnr('%')                                      " {{{3
    " if l:buffer == -1
    "   echohl ErrorMsg
    "   echomsg "No matching buffer for" l:buffer
    "   echohl None
    "   return
    " endif
    " let l:last_buffer = bufnr('$')
    " let l:delete_count = 0
    " let l:n = 1
    " let l:bang = '!'
    " while l:n <= l:last_buffer
    "   if l:n != l:buffer && buflisted(l:n)
    "     if l:bang == '' && getbufvar(l:n, '&modified')
    "       echohl ErrorMsg
    "       echomsg 'No write since last change for buffer'
    "             \ l:n '(add ! to override)'
    "       echohl None
    "     else
    "       silent exe 'bdel' . l:bang . ' ' . l:n
    "       if ! buflisted(l:n)
    "         let delete_count = l:delete_count+1
    "       endif
    "     endif
    "   endif
    "   let l:n = l:n + 1
    " endwhile
    " if l:delete_count == 1
    "   echomsg l:delete_count "buffer deleted"
    " elseif l:delete_count > 1
    "   echomsg l:delete_count "buffers deleted"
    " endif "}}}3
    " Define Some local variables                                    " {{{3
    let l:curr_buffer  = bufnr('%')
    let l:buflist      = tabpagebuflist()
    if tabpagenr("$") == 1
      let l:buflist      = range(1, bufnr('$'))
    endif
    let l:delete_count = 0
    let l:bang         = '!'
    for l:n in l:buflist
      if l:n != l:curr_buffer && buflisted(l:n)
        if l:bang == '' && getbufvar(l:n, '&modified')
          echohl ErrorMsg
          echomsg 'No write since last change for buffer'
                \ l:n '(add ! to override)'
          echohl None
        else
          silent exe 'bdel' . l:bang . ' ' . l:n
          if ! buflisted(l:n)
            let delete_count = l:delete_count+1
          endif
        endif
      endif
    endfor
    if l:delete_count == 1
      echomsg l:delete_count "buffer deleted"
    elseif l:delete_count > 1
      echomsg l:delete_count "buffers deleted"
    endif "}}}3
  endfunction
  " Folding For Indent:                                              " {{{2
  function! Get_indent_Fold(lnum)
    function! s:NextNonBlankLine(lnum)                               " {{{3
      let numlines = line('$')
      let current = a:lnum + 1
      while current <= numlines
        if getline(current) =~? '\v\S'
          return current
        endif
        let current += 1
      endwhile
      return -2
    endfunction "}}}3
    function! s:IndentLevel(lnum)                                    " {{{3
      return indent(a:lnum) / &shiftwidth
    endfunction "}}}3
    if getline(a:lnum) =~? '\v^\s*$'
      return '-1'
    endif
    let this_indent = s:IndentLevel(a:lnum)
    let next_indent = s:IndentLevel(s:NextNonBlankLine(a:lnum))
    if next_indent == this_indent
      return this_indent
    elseif next_indent < this_indent
      return this_indent
    elseif next_indent > this_indent
      return '>' . next_indent
    endif
  endfunction
  " Fold Jumper:                                                     " {{{2
  fun! FoldJump(dir)                                                 " {{{3
    let l:start = line('.')
    let l:new = l:start
    if (a:dir == 1) " Moving Next fold or Down
      normal zjzz
      let l:new = line('.')
      if l:new == l:start
        normal }}
      endif
    else            " Moving Previous Fold or UP
      " normal zkzzzkzjzz
      normal zkzz
      let l:new = line('.')
      if l:new == l:start
        normal {{
      endif
    endif
  endf "}}}3
  function! NextClosedFold(dir)                                      " {{{3
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
      exe cmd
      let [l0, l] = [l, line('.')]
      let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
  endfunction "}}}3
"}}}1
" Mappings:                                                          " {{{1
  " Basic Editing:                                                   " {{{2
    " Save Split:                                                    " {{{3
      nnoremap <leader>s :split<CR>
      nnoremap <leader>v :vsplit<CR>
      nnoremap <leader>w :w<CR>
      nnoremap <leader>q :q<CR>
    " Maintain Selection When Indenting Text:                        " {{{3
      if &term =~ '^screen'
        noremap  <Esc>l >>
        vnoremap <Esc>l >gv
        noremap  <Esc>h <<
        vnoremap <Esc>h <gv
      else
        noremap  <A-l> >>
        vnoremap <A-l> >gv
        noremap  <A-h> <<
        vnoremap <A-h> <gv
      endif
    " HLNext Mapping:                                                " {{{3
      nnoremap <silent> n nzz:call <SID>HLNext(0.1)<cr>
      nnoremap <silent> N Nzz:call <SID>HLNext(0.1)<cr>
    " Movements:                                                     " {{{3
      " First Nonblank Character On The Line:
      nnoremap 0 ^
      " Search and replace
      nnoremap <space> /\v
      " Going Up and down in Wrap lines
      nnoremap j gj
      " Going Up and down in Wrap lines
      nnoremap k gk
    " Tab Movements:                                                 " {{{3
      nnoremap <leader>tn :tabnew<CR>
      nnoremap <Tab>      gt
      nnoremap <S-Tab>    gT
      nnoremap <C-Left>   :tabmove -1<CR>
      nnoremap <C-Right>  :tabmove +1<CR>
    " Buffer Movements Fold Movement:                                " {{{3
      if g:local_settings_place == "home"                            " {{{4
        " Jump To Next Fold or Downwards
        nmap ö [
        " Jump To Previous Fold or Upwards
        nmap ä ]
        " Jump to Definition
        nnoremap ü <C-]>
        " Jump back to Last Position
        nnoremap Ü <C-O>
        " Jump Folds Upwards or EmptyLines
        nnoremap <silent> Ö :call FoldJump(1)<CR>
        " Jump Folds Downwards or EmptyLines
        nnoremap <silent> Ä :call FoldJump(-1)<CR>
        " Jump Closed-Folds Upwards
        nnoremap <silent> ;Ö :call NextClosedFold('j')<cr>
        " Jump Closed-Folds Downwards
        nnoremap <silent> ;Ä :call NextClosedFold('k')<cr>
      else                                                           " {{{4
        if &term =~ '^screen'
          " Jump To Next Fold or Downwards
          nnoremap <Esc>/ :call FoldJump(1)<CR>
          " Jump To Previous Fold or Upwards
          nnoremap <Esc>? :call FoldJump(0)<CR>
        else
          " Jump To Next Fold or Downwards
          nnoremap <A-/> :call FoldJump(1)<CR>
          " Jump To Previous Fold or Upwards
          nnoremap <A-?> :call FoldJump(0)<CR>
        endif
      endif "}}}4
    " Moving Lines Up And Down:                                      " {{{3
      " <move> (LineNumber: . )<to-location><CR><reselect::realign::reselect>
      if &term =~ '^screen'
        nnoremap <silent><Esc>j :m .+1<CR>==
        vnoremap <silent><Esc>j :m '>+1<CR>gv=gv
        nnoremap <silent><Esc>k :m .-2<CR>==
        vnoremap <silent><Esc>k :m '<-2<CR>gv=gv
      else
        nnoremap <silent><A-j> :m .+1<CR>==
        nnoremap <silent><A-k> :m .-2<CR>==
        vnoremap <silent><A-j> :m '>+1<CR>gv=gv
        vnoremap <silent><A-k> :m '<-2<CR>gv=gv
      endif
    " Window Navigations:                                            " {{{3
      " Change Window Size:                                          " {{{4
        if s:running_terminal
          if &term =~ '^screen'
            nnoremap <silent><Esc>H :vertical resize -5<CR>
            nnoremap <silent><Esc>J :resize +5<CR>
            nnoremap <silent><Esc>K :resize -5<CR>
            nnoremap <silent><Esc>L :vertical resize +5<CR>
          else
            nnoremap <silent><S-A-H> :vertical resize -5<CR>
            nnoremap <silent><S-A-J> :resize +5<CR>
            nnoremap <silent><S-A-K> :resize -5<CR>
            nnoremap <silent><S-A-L> :vertical resize +5<CR>
          endif
        else
          nnoremap <silent>H       :vertical resize -5<CR>
          nnoremap <silent><S-A-J> :resize +5<CR>
          nnoremap <silent><S-A-K> :resize -5<CR>
          nnoremap <silent><S-A-L> :vertical resize +5<CR>
        endif
      " Move Btwn Split Windows:                                     " {{{4
        nnoremap <silent><C-h> :wincmd h<CR>
        nnoremap <silent><C-l> :wincmd l<CR>
        nnoremap <silent><C-j> :wincmd j<CR>
        nnoremap <silent><C-k> :wincmd k<CR>
    " Colorscheme Background Toggle:                                 " {{{3
      if &term =~ '^screen'
        nnoremap <Esc>#
          \ :let &background = ( &background=='dark' ? 'light' : 'dark' ) \|
          \ :redraw                                                       \|
          \ :echom &background<CR>
      else
        nnoremap <A-#>
          \ :let &background = ( &background=='dark' ? 'light' : 'dark' ) \|
          \ :redraw                                                       \|
          \ :echom &background<CR>
      endif
    " Change To CWD:                                                 " {{{3
      nnoremap <leader>cd :lcd%:h<CR>
    " BufOnly Mapping Close All But This Buffer:                     " {{{3
      nnoremap <leader>bd :call <SID>BufOnly()<CR>
    " Toggle Paste:                                                  " {{{3
      " Turned Off Due To YCM-Confilict. <Tab> is disabled due to
      " this in terminal.
      " nnoremap <leader>pp :setlocal paste!<cr>
      set pastetoggle=<F2>
    " Some Text Formatting:                                          " {{{3
      nnoremap <leader>eo :call <SID>Combine_line(line("."), '0305')<CR>
      vnoremap <leader>eo :call <SID>Combine_select('0305')<CR>
      nnoremap <leader>eu :call <SID>Combine_line(line("."), '0333')<CR>
      vnoremap <leader>eu :call <SID>Combine_select('0333')<CR>
      nnoremap <leader>et :call <SID>Combine_line(line("."), '0336')<CR>
      vnoremap <leader>et :call <SID>Combine_select('0336')<CR>
      nnoremap <leader>ec :call <SID>Del_combine_line()<CR>
      vnoremap <leader>ec :call <SID>Del_combine_selection()<CR>
    " Toggle Number Use:                                             " {{{3
      " nnoremap <silent><A-n> :call NumberToggle()<CR>
  " Acessing Files:                                                  " {{{2
    execute   " nnoremap <leader>ev   :e " . expand("$MYVIMRC")                                     . "\<CR>"
    execute   " nnoremap <leader>eb   :e " . expand(s:vimfiles  . "dotvim/vimrcs/base_rc")          . "\<CR>"
    execute   " nnoremap <leader>ep   :e " . expand(s:vimfiles  . "dotvim/vimrcs/plugin_rc")        . "\<CR>"
    execute   " nnoremap <leader>eep  :e " . expand(s:vimfiles  . "dotvim/autoload/dotvim.vim")     . "\<CR>"
    execute   " nnoremap <leader>ek   :e " . expand(s:vimfiles  . "dotvim/vimrcs/commenter.vim")    . "\<CR>"
    execute   " nnoremap <leader>ed   :e " . expand(s:vimfiles  . "dotvim/vimrcs/dragvisuals.vim")  . "\<CR>"
    execute   " nnoremap <leader>em   :e " . expand(s:vimfiles  . "dotvim/vimrcs/Term_Mapping_rc")  . "\<CR>"
" Autocomd:                                                          " {{{1
  " WhiteSpaces:                                                     " {{{2
    augroup WHITESPACES
      au!
      if g:local_settings_place == "home" || g:local_settings_place == "collg"
        autocmd BufWritePre * call <SID>Remove_ExtraWhiteSpace()
      else
        nnoremap <leader>rs  :call <SID>Remove_ExtraWhiteSpace()<CR>
      endif
      " For pFUnit Testing
      autocmd BufWinEnter *.pf set ft=fortran
    augroup end
  " Last Edit Position:                                              " {{{2
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
  " FileType Specific:                                               " {{{2
    augroup MYFILETYPE
      au!
      autocmd BufNewFile,BufRead .bash*,*bash_* set  ft=sh
      autocmd Filetype           plaintex       set  ft=tex
      autocmd Filetype           tex            setl tw=120
      autocmd FileType           json,javascript,cmake,perl,sh,c,cpp,matlab,cuda,html,php,python,conf
        \ setl sts=2 sw=2 ts=2
        \ foldmethod=expr foldexpr=Get_indent_Fold(v:lnum)
      autocmd FileType fortran
        \ setl foldmethod=expr foldexpr=Get_indent_Fold(v:lnum) |
        \ setl tw=120                                           |
        \ nmap <silent><buffer><C-F> :set syntax=fortran       \|
          \ let b:fortran_fixed_source=!b:fortran_fixed_source \|
          \ set syntax=text                                    \|
          \ set syntax=fortran<CR>

      autocmd FileType  * call <SID>ColorColumnSetting()           |
                        \ call <SID>MatchExtraWhitespaces()
    augroup end
