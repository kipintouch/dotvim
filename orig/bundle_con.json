{
  "Shougo/neocomplcache.vim": {
    "config": [
      "\" Not Used So Left Alone So Far"
    ]
  },
  "Shougo/neocomplete.vim": {
    "config": [
      "let g:neocomplete#enable_at_startup = 1                        ",
      "let g:neocomplete#data_directory    = expand(s:vimfiles .      ",
      "                           \\  \"temp/cache/neocomplete/\")    ",
      "inoremap <expr><S-Tab>  pumvisible() ? \"\\<C-p>\": \"<S-Tab>\"",
      "inoremap <expr><Tab>    pumvisible() ? \"\\<C-n>\": \"<Tab>\"  "
    ]
  },
  "Valloric/YouCompleteMe": {
    "config": [
      "\" Close Scratch Window:                                  \"{{{2",
      "  let g:ycm_autoclose_preview_window_after_completion=1         ",
      "\" Extra Configuration Required:                          \"{{{2",
      "  let g:ycm_global_ycm_extra_conf = expand(s:vimfiles .         ",
      "                       \\     'vimrcs/.ycm_extra_conf.py')      ",
      "\" View The Preview Window For Words Used In Completion:  \"{{{2",
      "  \" set completeopt-=preview                                   ",
      "  \" let g:ycm_key_detailed_diagnostics = ''                    ",
      "\" ECLIM SETTINGS:                                        \"{{{2",
      "  let g:EclimCompletionMethod = 'omnifunc'                      ",
      "  let g:ycm_key_detailed_diagnostics = ''                       ",
      "  let g:ycm_filetype_blacklist = {                              ",
      "    \\   'tagbar': 1,                                           ",
      "    \\       'qf': 1,                                           ",
      "    \\    'notes': 1,                                           ",
      "    \\ 'markdown': 1,                                           ",
      "    \\    'unite': 1,                                           ",
      "    \\     'text': 1,                                           ",
      "    \\  'vimwiki': 1,                                           ",
      "    \\   'pandoc': 1,                                           ",
      "    \\  'infolog': 1,                                           ",
      "    \\     'mail': 1                                            ",
      "    \\}                                                         "
    ]
  },
  "MichaelMalick/vim-colors-bluedrake": {
    "config": []
  },
  "cocopon/iceberg.vim": {
    "config": []
  },
  "29decibel/codeschool-vim-theme": {
    "config": []
  },
  "crusoexia/vim-dracula": {
    "config": []
  },
  "morhetz/gruvbox": {
    "config": []
  },
  "freeo/vim-kalisi": {
    "config": []
  },
  "zeis/vim-kolor": {
    "config": []
  },
  "tomasr/molokai": {
    "config": []
  },
  "fmoralesc/molokayo": {
    "config": []
  },
  "sickill/vim-monokai": {
    "config": []
  },
  "reedes/vim-colors-pencil": {
    "config": []
  },
  "szw/seoul256.vim": {
    "config": []
  },
  "altercation/vim-colors-solarized": {
    "config": [
      "let g:solarized_termcolors=256",
      "\" Not Sure About this!!!     ",
      "\" let g:solarized_termtrans=1"
    ]
  },
  "vim-scripts/xoria256.vim": {
    "config": []
  },
  "zefei/vim-colortuner": {
    "config": []
  },
  "junegunn/goyo.vim": {
    "config": [
      "\" To Be Figured Out"
    ]
  },
  "junegunn/vim-easy-align": {
    "config": [
      "\" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)              ",
      "vmap <Enter> <Plug>(EasyAlign)                                               ",
      "\" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)   ",
      "nmap <Leader>a <Plug>(EasyAlign)                                             ",
      "let g:easy_align_delimiters = {                                              ",
      "  \\   '>': { 'pattern': '>>\\|=>\\|>'                                       ",
      "  \\   },                                                                    ",
      "  \\   '/': {                                                                ",
      "  \\         'pattern':         '//\\+\\|/\\*\\|\\*/',                       ",
      "  \\         'delimiter_align': 'l',                                         ",
      "  \\         'ignore_groups':   ['!Comment']                                 ",
      "  \\   },                                                                    ",
      "  \\   ']': {                                                                ",
      "  \\         'pattern':       '[[\\]]',                                      ",
      "  \\         'left_margin':   0,                                             ",
      "  \\         'right_margin':  0,                                             ",
      "  \\         'stick_to_left': 0                                              ",
      "  \\   },                                                                    ",
      "  \\   ')': {                                                                ",
      "  \\         'pattern':       '[()]',                                        ",
      "  \\         'left_margin':   0,                                             ",
      "  \\         'right_margin':  0,                                             ",
      "  \\         'stick_to_left': 0                                              ",
      "  \\   },                                                                    ",
      "  \\   'd': {                                                                ",
      "  \\         'pattern':      ' \\(\\S\\+\\s*[;=]\\)\\@=',                    ",
      "  \\         'left_margin':  0,                                              ",
      "  \\         'right_margin': 0                                               ",
      "  \\   }                                                                     ",
      "  \\ }                                                                       ",
      "vmap <Space> :EasyAlign/::/{'is':['String'], 'iu': 1}<CR>g0                  ",
      "for s:ccmt in ['#', '\"', '!']                                               ",
      "  let g:easy_align_delimiters[s:ccmt] = {'pattern': s:ccmt,                  ",
      "        \\ 'ignore_groups':    ['String'],                                   ",
      "        \\ 'ignore_unmatched': 0}                                            ",
      "endfor                                                                       "
    ]
  },
  "terryma/vim-multiple-cursors": {
    "config": [
      "\" Called once right before you start selecting multiple cursors            ",
      "function! Multiple_cursors_before()                                         ",
      "  if exists(':NeoCompleteLock')==2                                          ",
      "    exe 'NeoCompleteLock'                                                   ",
      "  endif                                                                     ",
      "endfunction                                                                 ",
      "\" Called once only when the multiple selection is canceled (default <Esc>) ",
      "function! Multiple_cursors_after()                                          ",
      "  if exists(':NeoCompleteUnlock')==2                                        ",
      "    exe 'NeoCompleteUnlock'                                                 ",
      "  endif                                                                     ",
      "endfunction                                                                 "
    ]
  },
  "tpope/vim-surround": {
    "config": [
      "\" Nothing To Be Done"
    ]
  },
  "kshenoy/vim-origami": {
    "config": [
      "\"let g:OrigamiMap = {                                                                 ",
      "\"  \\ 'Align'            : \"a\",                                                     ",
      "\"  \\ 'Leader'           : \"Z\",                                                     ",
      "\"  \\ 'AlignAll'         : \"A\",                                                     ",
      "\"  \\ 'CommentedOpen'    : \"F\",                                                     ",
      "\"  \\ 'UncommentedOpen'  : \"f\",                                                     ",
      "\"  \\ 'CommentedClose'   : \"C\",                                                     ",
      "\"  \\ 'UncommentedClose' : \"c\",                                                     ",
      "\"  \\ 'Delete'           : \"\",                                                      ",
      "\"  \\ }                                                                               ",
      "let g:OrigamiPadding = 1                                                               ",
      "function! s:Get(var, ...) \"{{{ 2                                                      ",
      "  \" Description:                                                                      ",
      "  \" Returns the buffer-local variable, global variable or the default value           ",
      "  if exists('b:' . a:var)                                                              ",
      "    return eval('b:' . a:var)                                                          ",
      "  elseif exists('g:' . a:var)                                                          ",
      "    return eval('g:' . a:var)                                                          ",
      "  elseif a:0                                                                           ",
      "    return a:1                                                                         ",
      "  endif                                                                                ",
      "endfunction \"}}}2                                                                     ",
      "function! <SID>DeleteFoldmarker() \"{{{ 2                                              ",
      "  \" Description: Remove a foldmarker from the current line                            ",
      "  let l:OrigamiCommentString      =                                                    ",
      "        \\ split(s:Get('OrigamiCommentString', &commentstring), '%s')                  ",
      "  if len(l:OrigamiCommentString) == 0 |                                                ",
      "        \\ let l:OrigamiCommentString = ['', ''] | endif                               ",
      "  if len(l:OrigamiCommentString) == 1 |                                                ",
      "        \\ call add(l:OrigamiCommentString, '')  | endif                               ",
      "  let l:line = getline('.')                                                            ",
      "  let l:fmr  = split( &foldmarker, ',' )                                               ",
      "  let l:line =                                                                         ",
      "    \\ substitute(l:line,                                                              ",
      "    \\ '\\s*\\(' . escape(l:OrigamiCommentString[0], '*')                              ",
      "    \\ . '\\)\\?\\s*\\(' . l:fmr[0] . '\\|' . l:fmr[1] . '\\)'                         ",
      "    \\ . '\\(\\d*\\)\\s*\\(' . escape(l:OrigamiCommentString[1], '*') . '\\)\\?\\s*$', ",
      "    \\ '', '' )                                                                        ",
      "  call setline('.', l:line )                                                           ",
      "endfunction \"}}}2                                                                     ",
      "nnoremap <silent>ZD :call <SID>DeleteFoldmarker()<CR>                                  "
    ]
  },
  "tpope/vim-fugitive": {
    "config": []
  },
  "airblade/vim-gitgutter": {
    "config": [
      "let g:gitgutter_signs    = 0                                                   ",
      "let g:gitgutter_realtime = 0                                                   ",
      "if s:running_unix                                                              ",
      "    let g:gitgutter_sign_added            = \"\\u27F9\"  \" Default: +         ",
      "    let g:gitgutter_sign_removed          = \"\\u27F8\"  \" Default: _         ",
      "    let g:gitgutter_sign_modified         = \"\\u27Fa\"  \" Default: ~         ",
      "    let g:gitgutter_sign_modified_removed = \"\\u2b45\"  \" Default: _~        ",
      "endif                                                                          ",
      "call gitgutter#disable()                                                       ",
      "nnoremap <F3> :GitGutterToggle<CR> \\| :GitGutterLineHighlightsToggle<CR>      ",
      "let g:gitgutter_map_keys = 0                                                   ",
      "\" if has('gui_running') && g:local_settings_place == 'home'                   ",
      "\"     nmap <leader>ö <plug>GitGutterNextHunk                                  ",
      "\"     nmap <leader>ä <plug>GitGutterPrevHunk                                  ",
      "\" elseif  g:local_settings_place == 'home'                                    ",
      "\"     nmap <A-ä> <plug>GitGutterPrevHunk                                      ",
      "\"     nmap <A-ö> <plug>GitGutterNextHunk                                      ",
      "\" endif                                                                       "
    ]
  },
  "vim-airline/vim-airline": {
    "config": [
      "\" Symbols:                                                              \"{{{2",
      "  if s:running_unix                                                      \"{{{3",
      "    if !exists('g:airline_symbols')                                            ",
      "      let g:airline_symbols = {}                                               ",
      "      \" Airline Symbols:                                                      ",
      "      let g:airline_left_sep         = \"\\UE0B0\"  \" \\u2B80                 ",
      "      let g:airline_left_alt_sep     = \"\\UE0B1\"  \" \\u2B81                 ",
      "      let g:airline_right_sep        = \"\\UE0B2\"  \" \\u2B82                 ",
      "      let g:airline_right_alt_sep    = \"\\UE0B3\"  \" \\u2B83                 ",
      "      let g:airline_symbols.branch   = \"\\UE0A0\"  \" \\u2B60                 ",
      "      let g:airline_symbols.readonly = \"\\UE0A1\"  \" \\u2B64                 ",
      "      let g:airline_symbols.linenr   = \"\\UE0A2\"  \" \\u2B61                 ",
      "      let g:airline_ft_sym           = \"\\UE0A3\"  \" \\u2B62 \\u2B63         ",
      "      \" Tabline Addon Information:                                            ",
      "      let g:airline#extensions#tabline#left_sep     = \"\\UE0B0\"  \"\\u2B80   ",
      "      let g:airline#extensions#tabline#left_alt_sep = \"\\UE0B1\"  \"\\u2B81   ",
      "      let g:airline#extensions#tabline#fnamemod     = ':t'                     ",
      "      let g:airline#extensions#tabline#enabled      = 1                        ",
      "    endif                                                                      ",
      "  else                                                                   \"{{{3",
      "    if !exists('g:airline_symbols')                                            ",
      "      let g:airline_symbols = {}                                               ",
      "      \" Airline Symbols:                                                      ",
      "      let g:airline_left_sep         = ''                                      ",
      "      let g:airline_left_alt_sep     = ''                                      ",
      "      let g:airline_right_sep        = ''                                      ",
      "      let g:airline_right_alt_sep    = ''                                      ",
      "      let g:airline_symbols.branch   = 'µ'                                     ",
      "      let g:airline_symbols.readonly = 'ß'                                     ",
      "      let g:airline_symbols.linenr   = 'ln'                                    ",
      "      let g:airline_ft_sym           = 'FT '                                   ",
      "      \" Tabline Addon Information:                                            ",
      "      let g:airline#extensions#tabline#left_sep     = ''                       ",
      "      let g:airline#extensions#tabline#left_alt_sep = ''                       ",
      "      let g:airline#extensions#tabline#fnamemod     = ':t'                     ",
      "      let g:airline#extensions#tabline#enabled      = 1                        ",
      "    endif                                                                      ",
      "  endif                                                                        ",
      "\" Theme:                                                                \"{{{2",
      "  let g:airline_theme = 'powerlineish'                                         ",
      "\" Initializing Airiline:                                                \"{{{2",
      "  function! s:AirlineSettings()                                          \"{{{3",
      "    \" Section: MODE > B > C > gutter> X > Y > Z > Whitespace                  ",
      "      let g:airline_section_c = airline#section#create(['%>',                  ",
      "                           \\   'file', '  ', 'readonly'])                     ",
      "    \" let g:airline_section_x = airline#section#create_right(['tagbar'])      ",
      "      let g:airline_section_x = ''                                             ",
      "      let g:airline_section_y = airline#section#create([                       ",
      "                           \\ g:airline_ft_sym . '%{&ft}'])                    ",
      "      let g:airline_section_b = airline#section#create([                       ",
      "                           \\  '%{strftime(\"%d %b %Y %H:%M \")}',             ",
      "                           \\  'hunks','branch'])                              ",
      "  endfunction \"{{{3                                                           ",
      "augroup AirlineSetting                                                   \"{{{3",
      "  au!                                                                          ",
      "      \" this one is which you're most likely to use?                          ",
      "  autocmd VimEnter * call s:AirlineSettings()                                  ",
      "augroup end \"{{{3                                                             "
    ]
  },
  "majutsushi/tagbar": {
    "config": [
      "nnoremap <leader>tg :TagbarOpen<CR>                                                            ",
      "nnoremap       <F7> :TagbarToggle<CR>                                                          ",
      "if s:running_windows                                                                           ",
      "  let g:tagbar_ctags_bin = expand(\"$VIM/vimfiles/local_bundle/ctags58/\") . \"ctags.exe\"     ",
      "endif                                                                                          ",
      "let g:tagbar_sort = 0                                                                          "
    ]
  },
  "octol/vim-cpp-enhanced-highlight": {
    "config": [
      "\" To Be Decided"
    ]
  },
  "kipintouch/textlint-syntastic": {
    "config": [
      "\" To Be Decided"
    ]
  },
  "lang_cpp_enhanced_highlight": {
    "config": [
      "\" Remember to have vim-shell with win for async!                                ",
      "let &tags                      = expand(s:vimfiles . 'temp/TAGS/')  . ','        ",
      "let g:easytags_async           = 1                                               ",
      "let g:easytags_auto_highlight  = 1                                               ",
      "let g:easytags_events          = ['BufWritePost']                                ",
      "let g:easytags_resolve_links   = 1                                               ",
      "\" Remove in favour of Performance                                               ",
      "\"let g:easytags_syntax_keyword  = 'always'                                      ",
      "let g:easytags_include_members = 1                                               ",
      "\" let g:easytags_by_filetype  = expand(s:vimfiles . 'temp/TAGS/')               "
    ]
  },
  "scrooloose/syntastic": {
    "config": [
      "\" Syntastic Eclim Problems:                                                                                    \" {{{2",
      "  let g:EclimFileTypeValidate              = 0                                                                         ",
      "  let g:EclimPythonValidate                = 0                                                                         ",
      "\" Some Global Settings:                                                                                        \" {{{2",
      "  let g:syntastic_auto_loc_list            = 1                                                                         ",
      "  let g:syntastic_always_populate_loc_list = 1                                                                         ",
      "  let g:syntastic_check_on_open            = 1                                                                         ",
      "  let g:syntastic_check_on_wq              = 1                                                                         ",
      "  let g:syntastic_aggregate_errors         = 1                                                                         ",
      "  let g:syntastic_error_symbol             = \"\\u2717\" \" '✗'                                                        ",
      "  let g:syntastic_warning_symbol           = \"\\u26A0\" \" '⚠'                                                        ",
      "  let g:syntastic_style_warning_symbol     = \"\\u2630\" \" '☰'                                                        ",
      "  let g:syntastic_style_error_symbol       = \"\\u2652\" \" '♒'                                                        ",
      "  let g:syntastic_enable_ballons           = has('balloon_eval')                                                       ",
      "  let g:syntastic_always_populate_loc_list = 1                                                                         ",
      "  let g:syntastic_auto_jump                = 1                                                                         ",
      "  let g:syntastic_auto_loc_list            = 1                                                                         ",
      "  let g:syntastic_loc_list_height          = 5                                                                         ",
      "  let g:syntastic_ignore_files             = [  '^/usr/', '*node_modules*', '*vendor*', '*build*',                     ",
      "                                              \\ '*LOCAL*', '*BASE', '*REMOTE*']                                       ",
      "  \" let g:syntastic_mode_map                 = { 'mode': 'active' }                                                   ",
      "  let g:syntastic_mode_map                 = {  'mode':               'passive',                                       ",
      "                                              \\ 'active_filetypes':  [],                                              ",
      "                                              \\ 'passive_filetypes': [] }                                             ",
      "\" Checkers:                                                                                                    \" {{{2",
      "  let g:syntastic_javascript_checkers      = ['jshint', 'jscs'                                                 ]       ",
      "  let g:syntastic_json_checkers            = ['jsonlint', 'jsonval'                                            ]       ",
      "  let g:syntastic_ruby_checkers            = ['rubocop', 'mri'                                                 ]       ",
      "  let g:syntastic_perl_checkers            = ['perl', 'perlcritic', 'podchecker'                               ]       ",
      "  let g:syntastic_python_checkers          = ['pylint', 'pep8', 'python'                                       ]       ",
      "  let g:syntastic_cpp_checkers             = ['gcc', 'cppcheck', 'cpplint', 'ycm', 'clang_tidy', 'clang_check' ]       ",
      "  let g:syntastic_c_checkers               = ['gcc', 'make', 'cppcheck', 'clang_tidy', 'clang_check'           ]       ",
      "  let g:syntastic_haml_checkers            = ['haml_lint', 'haml'                                              ]       ",
      "  let g:syntastic_html_checkers            = ['jshint'                                                         ]       ",
      "  let g:syntastic_yaml_checkers            = ['jsyaml'                                                         ]       ",
      "  let g:syntastic_sh_checkers              = ['sh', 'shellcheck', 'checkbashisms'                              ]       ",
      "  let g:syntastic_vim_checkers             = ['vimlint'                                                        ]       ",
      "  let g:syntastic_enable_perl_checker      = 1                                                                         ",
      "\" Checker Settings:                                                                                            \" {{{2",
      "  let g:syntastic_c_clang_tidy_sort        = 1                                                                         ",
      "  let g:syntastic_c_clang_check_sort       = 1                                                                         ",
      "  let g:syntastic_c_remove_include_errors  = 1                                                                         ",
      "  let g:syntastic_quiet_messages           = { \"level\": \"[]\", \"file\": ['*_LOCAL_*', '*_BASE_*', '*_REMOTE_*']  } ",
      "  let g:syntastic_python_pylint_post_args  = \"--rcfile=\" .                                                           ",
      "                                            \\ expand(s:vimfiles . \"vimrcs/pylint_std.rc\")                           ",
      "  let g:syntastic_stl_format               = '[%E{E: %fe #%e}%B{, }%W{W: %fw #%w}]'                                    ",
      "  let g:syntastic_java_javac_options       = \"-g:none -source 8 -Xmaxerrs 5 -Xmaswarns 5\"                            ",
      "\" Syntastic Debug Info:                                           \" {{{2                                             ",
      "  \" let g:syntastic_debug = 1                                                                                         ",
      "  \" let g:syntastic_debug_file='~/some.log'                                                                           ",
      "\" Some Mapping:                                                   \" {{{2                                             ",
      "  nnoremap <silent><F5> :SyntasticToggleMode<CR>                                                                       "
    ]
  },
  "mileszs/ack.vim": {
    "config": [
      "\" To Be Decided"
    ]
  },
  "scrooloose/nerdtree": {
    "config": [
      "let NERDTreeIgnore = ['\\.beam$', '\\.pyc$', 'ebin$', ",
      "   \\  '\\.obj$', '\\.out$', '\\.aux$', '\\.pdf$']    ",
      "let NERDChristmasTree = 1                             ",
      "let NERDTreeMinimalUI = 1                             ",
      "let NERDTreeDirArrows = 0                             ",
      "nnoremap <F10> :NERDTreeToggle<CR>                    "
    ]
  },
  "SirVer/ultisnips": {
    "config": [
      "let g:snips_author = \"doom\"                                                            ",
      "let g:snips_email  = \"kipintouch29@gmail.com\"                                          ",
      "let g:snips_github = \"kipintouch29\"                                                    ",
      "\" Required By UltiSnipsEdit Command:                                              \"{{{2",
      "  let g:UltiSnipsSnippetsDir         = expand(s:vimfiles. 'UltiSnips/')                  ",
      "\" Search Path For Snippets:                                                       \"{{{2",
      "  let g:UltiSnipsSnippetDirectories  = [\"UltiSnips\", expand(s:vimfiles. 'UltiSnips/')] ",
      "\" Keys And Location:                                                              \"{{{2",
      "  let g:UltiSnipsEditSplit           = \"horizontal\"                                    ",
      "  let g:UltiSnipsListSnippets        = \"<F4>\"                                          ",
      "  let g:UltiSnipsExpandTrigger       = \"<C-j>\"                                         ",
      "  let g:UltiSnipsJumpForwardTrigger  = \"<C-j>\"                                         ",
      "  let g:UltiSnipsJumpBackwardTrigger = \"<C-k>\"                                         "
    ]
  },
  "osyo-manga/unite-airline_themes": {
    "config": [
      "  nnoremap <silent> [unite]a  :Unite -auto-preview                          ",
      "                        \\   -buffer-name=airline_themes airline_themes<cr> "
    ]
  },
  "ujihisa/unite-colorscheme": {
    "config": [
      "  nnoremap <silent> [unite]c  :Unite -auto-preview                          ",
      "                        \\   -buffer-name=colorscheme colorscheme<cr>       "
    ]
  },
  "Shougo/unite.vim": {
    "config": [
      "\" Basics:                                                                                          \"{{{2",
      "  call unite#filters#matcher_default#use(['matcher_fuzzy'])                                               ",
      "  call unite#filters#sorter_default#use(['sorter_rank'])                                                  ",
      "  call unite#custom#source('line,outline','matchers','matcher_fuzzy')                                     ",
      "  call unite#custom_source('file_rec,file_rec/async,file_mru,' .                                          ",
      "    \\ 'file,buffer,grep',                                                                                ",
      "    \\ 'ignore_pattern', join([                                                                           ",
      "    \\   '\\.git/', '\\.pyc',   '\\.o', '\\.beam', '\\.pyc',                                              ",
      "    \\   '\\.ebin', '\\.dll', '\\.obj', '\\.bak', '\\.exe',                                               ",
      "    \\    '\\.pyc', '\\.jpg', '\\.gif',  '\\.png'], '\\|'))                                               ",
      "  call unite#custom#profile('default', 'context', {                                                       ",
      "    \\     'start_insert':       1,                                                                       ",
      "    \\        'direction': 'below',                                                                       ",
      "    \\        'winheight':      10,                                                                       ",
      "    \\ 'prompt_direction': 'below',                                                                       ",
      "    \\   'prompt_visible':       1,                                                                       ",
      "    \\           'prompt': '» '                                                                           ",
      "    \\ })                                                                                                 ",
      "\" Unite Variables:                                                                                 \"{{{2",
      "  let g:unite_force_overwrite_statusline = 0                                                              ",
      "  let g:unite_data_directory             = expand(s:vimfiles .                                            ",
      "                                       \\  \"temp/cache/unite/\")                                         ",
      "  let g:unite_source_history_yank_enable = 1                                                              ",
      "  let g:unite_source_rec_max_cache_files = 5000                                                           ",
      "  if executable('ack')                                                                                    ",
      "    let g:unite_source_grep_command       = 'ack'                                                         ",
      "    let g:unite_source_rec_async_command  = 'ack'                                                         ",
      "    let g:unite_source_grep_default_opts  = '-iw --no-heading --no-color'                                 ",
      "    let g:unite_source_grep_recursive_opt = ''                                                            ",
      "  endif                                                                                                   ",
      "\" Unite Normal Mappings:                                                                           \"{{{2",
      "  nmap     <leader><space> [unite]                                                                        ",
      "  nnoremap [unite]         <nop>                                                                          ",
      "  if s:running_windows                                                                                    ",
      "    nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec:!       ",
      "               \\  buffer file_mru bookmark<cr><c-u>                                                      ",
      "    nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize                                           ",
      "               \\  -buffer-name=files file_rec:!<cr><c-u>                                                 ",
      "  else                                                                                                    ",
      "    nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec/async:! ",
      "               \\  buffer file_mru bookmark<cr><c-u>                                                      ",
      "    nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize                                           ",
      "               \\  -buffer-name=files file_rec/async:!<cr><c-u>                                           ",
      "  endif                                                                                                   ",
      "  nnoremap <silent> [unite]y  :<C-U>Unite -buffer-name=yanks history/yank<cr>                             ",
      "  nnoremap <silent> [unite]l  :<C-U>Unite -auto-resize -buffer-name=line line<cr>                         ",
      "  nnoremap <silent> [unite]b  :<C-U>Unite -auto-resize -buffer-name=buffers buffer<cr>                    ",
      "  nnoremap <silent> [unite]m  :<C-U>Unite -auto-resize -buffer-name=mappings mapping<cr>                  ",
      "  nnoremap <silent> [unite]s  :<C-U>Unite -quick-match buffer<cr>                                         ",
      "\" Unite Buffer Mappings:                                                                           \"{{{2",
      "  function! s:unite_settings()                                                                      \"{{{3",
      "    nmap <buffer> <C-Space> <plug>(unite_restart)                                                         ",
      "    nmap <buffer> <ESC>     <plug>(unite_exit)                                                            ",
      "    nmap <buffer> Q         <Plug>(unite_exit)                                                            ",
      "    imap <buffer> <Tab>     <Plug>(unite_skip_next_line)                                                  ",
      "    imap <buffer> <S-Tab>   <Plug>(unite_skip_previous_line)                                              ",
      "  endfunction \"}}}3                                                                                      ",
      "  augroup UniteSettings                                                                             \"{{{3",
      "    au!                                                                                                   ",
      "    autocmd FileType unite call s:unite_settings()                                                        ",
      "  augroup end \"}}}3                                                                                      "
    ]
  },
  "junkblocker/unite-codesearch": {
    "config": [
      "let g:unite_source_codesearch_command     = expand('~/.vim/local/codesearch/csearch') ",
      "let g:unite_source_codesearch_ignore_case = 1                                         ",
      "if ((g:local_settings_place == \"home\") || (g:local_settings_place == \"work\"))     ",
      "  nnoremap <silent> [unite]g                                                          ",
      "  \\ :<C-U>Unite -auto-resize -buffer-name=GREP codesearch<CR>                        ",
      "else                                                                                  ",
      "  nnoremap <silent> [unite]g                                                          ",
      "  \\ :<C-U>Unite -auto-resize -buffer-name=GREP grep:.<CR>                            ",
      "end                                                                                   "
    ]
  },
  "Shougo/neomru.vim": {
    "config": [
      "  nnoremap <silent> [unite]e :Unite -buffer-name=recent file_mru<cr>       "
    ]
  },
  "h1mesuke/unite-outline": {
    "config": [
      "nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>"
    ]
  },
  "Shougo/vimproc.vim": {
    "config": []
  },
  "kana/vim-textobj-user": {
    "config": []
  },
  "kana/vim-textobj-indent": {
    "config": []
  },
  "glts/vim-textobj-comment": {
    "config": []
  },
  "wellle/targets.vim":   {
    "config": []
  },
  "ryanoasis/vim-devicons": {
    "config": [
      "\" NERDTressFilehighlighting:                                                                        ",
      "  \" NerdTreeHighlighting: \" {{{2                                                                   ",
      "    function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)                                 ",
      "      exec 'autocmd FileType nerdtree highlight ' . a:extension . ' ctermbg=' . a:bg                 ",
      "                                               \\ . ' ctermfg=' . a:fg        . ' guibg='            ",
      "                                               \\ . a:guibg     . ' guifg='   . a:guifg              ",
      "      exec 'autocmd FileType nerdtree syn match ' . a:extension . ' #^\\s\\+.*' . a:extension . '$#' ",
      "    endfunction \"}}}2                                                                               ",
      "  \" NerdTreeFileSettings: \" {{{2                                                                   ",
      "    fun! s:NerDtreeSettings()                                                                        ",
      "      call NERDTreeHighlightFile('jade',        'green',   'none', 'green',   '#151515')             ",
      "      call NERDTreeHighlightFile('ini',         'yellow',  'none', 'yellow',  '#151515')             ",
      "      call NERDTreeHighlightFile('md',          'blue',    'none', '#3366FF', '#151515')             ",
      "      call NERDTreeHighlightFile('yml',         'yellow',  'none', 'yellow',  '#151515')             ",
      "      call NERDTreeHighlightFile('config',      'yellow',  'none', 'yellow',  '#151515')             ",
      "      call NERDTreeHighlightFile('conf',        'yellow',  'none', 'yellow',  '#151515')             ",
      "      call NERDTreeHighlightFile('json',        'yellow',  'none', 'yellow',  '#151515')             ",
      "      call NERDTreeHighlightFile('html',        'yellow',  'none', 'yellow',  '#151515')             ",
      "      call NERDTreeHighlightFile('styl',        'cyan',    'none', 'cyan',    '#151515')             ",
      "      call NERDTreeHighlightFile('css',         'cyan',    'none', 'cyan',    '#151515')             ",
      "      call NERDTreeHighlightFile('coffee',      'Red',     'none', 'red',     '#151515')             ",
      "      call NERDTreeHighlightFile('js',          'Red',     'none', '#ffa500', '#151515')             ",
      "      call NERDTreeHighlightFile('php',         'Magenta', 'none', '#ff00ff', '#151515')             ",
      "      call NERDTreeHighlightFile('ds_store',    'Gray',    'none', '#686868', '#151515')             ",
      "      call NERDTreeHighlightFile('gitconfig',   'Gray',    'none', '#686868', '#151515')             ",
      "      call NERDTreeHighlightFile('gitignore',   'Gray',    'none', '#686868', '#151515')             ",
      "      call NERDTreeHighlightFile('bashrc',      'Gray',    'none', '#686868', '#151515')             ",
      "      call NERDTreeHighlightFile('bashprofile', 'Gray',    'none', '#686868', '#151515')             ",
      "      call NERDTreeHighlightFile('jade',        'green',   'none', 'green',   '#151515')             ",
      "      call NERDTreeHighlightFile('fortran',     'green',   'none', 'green',   '#151515')             ",
      "    endf \"}}}2                                                                                      ",
      "  \" VimAutocmd: \" {{{2                                                                             ",
      "    augroup Devicons_NerdTree                                                                        ",
      "      au!                                                                                            ",
      "      autocmd VimEnter * call s:NerDtreeSettings()                                                   ",
      "    augroup end \"}}}2                                                                               "
    ]
  }
}
