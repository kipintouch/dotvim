{
  "autocomplete_neocomplcache": {
    "config": [
      "\" Not Used So Left Alone So Far"
    ]
  },
  "autocomplete_neocomplete": {
    "config": [
      "let g:neocomplete#enable_at_startup = 1                        ",
      "let g:neocomplete#data_directory    = expand(s:vimfiles .      ",
      "                           \\  \"temp/cache/neocomplete/\")    ",
      "inoremap <expr><S-Tab>  pumvisible() ? \"\\<C-p>\": \"<S-Tab>\"",
      "inoremap <expr><Tab>    pumvisible() ? \"\\<C-n>\": \"<Tab>\"  "
    ]
  },
  "autocomplete_ycm": {
    "config": [
      "\" Close Scratch window                                         ",
      "  let g:ycm_autoclose_preview_window_after_completion=1         ",
      "\" Extra Configuration Required !!                              ",
      "  let g:ycm_global_ycm_extra_conf = expand(s:vimfiles .         ",
      "                       \\     'vimrcs/.ycm_extra_conf.py')      ",
      "\" View the Preview/Scratch window for words used in completion ",
      "\" set completeopt-=preview                                     ",
      "\" let g:ycm_key_detailed_diagnostics = ''                      ",
      "\" ECLIM SETTINGS:                                              ",
      "let g:EclimCompletionMethod = 'omnifunc'                        ",
      "let g:ycm_key_detailed_diagnostics = ''                         ",
      "let g:ycm_filetype_blacklist = {                                ",
      "           \\   'tagbar': 1,                                    ",
      "           \\       'qf': 1,                                    ",
      "           \\    'notes': 1,                                    ",
      "           \\ 'markdown': 1,                                    ",
      "           \\    'unite': 1,                                    ",
      "           \\     'text': 1,                                    ",
      "           \\  'vimwiki': 1,                                    ",
      "           \\   'pandoc': 1,                                    ",
      "           \\  'infolog': 1,                                    ",
      "           \\     'mail': 1                                     ",
      "           \\}                                                  "
    ]
  },
  "color_bluedrake": {
    "config": []
  },
  "color_iceberg": {
    "config": []
  },
  "color_codeschool": {
    "config": []
  },
  "color_gruvbox": {
    "config": []
  },
  "color_dracula": {
    "config": []
  },
  "color_kalisi": {
    "config": []
  },
  "color_kolor": {
    "config": []
  },
  "color_molokai": {
    "config": []
  },
  "color_molokayo": {
    "config": []
  },
  "color_monokai": {
    "config": []
  },
  "color_pencil": {
    "config": []
  },
  "color_seoul256": {
    "config": []
  },
  "color_solarized": {
    "config": [
      "let g:solarized_termcolors=256",
      "\" Not Sure About this!!!     ",
      "\" let g:solarized_termtrans=1"
    ]
  },
  "color_xoria256": {
    "config": []
  },
  "color_colortuner": {
    "config": []
  },
  "format_easy_align": {
    "config": [
      "\" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)              ",
      "vmap <Enter> <Plug>(EasyAlign)                                               ",
      "\" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)   ",
      "nmap <Leader>a <Plug>(EasyAlign)                                             ",
      "let g:easy_align_delimiters = {                                              ",
      "  \\   '>': { 'pattern': '>>\\|=>\\|>'                                       ",
      "  \\   },                                                                    ",
      "  \\   '/': {                                                                ",
      "  \\         'pattern':         '//\\+\\|/\\*\\|\\*/',                       ",
      "  \\         'delimiter_align': 'l',                                         ",
      "  \\         'ignore_groups':   ['!Comment']                                 ",
      "  \\   },                                                                    ",
      "  \\   ']': {                                                                ",
      "  \\         'pattern':       '[[\\]]',                                      ",
      "  \\         'left_margin':   0,                                             ",
      "  \\         'right_margin':  0,                                             ",
      "  \\         'stick_to_left': 0                                              ",
      "  \\   },                                                                    ",
      "  \\   ')': {                                                                ",
      "  \\         'pattern':       '[()]',                                        ",
      "  \\         'left_margin':   0,                                             ",
      "  \\         'right_margin':  0,                                             ",
      "  \\         'stick_to_left': 0                                              ",
      "  \\   },                                                                    ",
      "  \\   'd': {                                                                ",
      "  \\         'pattern':      ' \\(\\S\\+\\s*[;=]\\)\\@=',                    ",
      "  \\         'left_margin':  0,                                              ",
      "  \\         'right_margin': 0                                               ",
      "  \\   }                                                                     ",
      "  \\ }                                                                       ",
      "vmap <Space> :'<,'>EasyAlign/::/{'is':['String'], 'iu': 1}<CR>g0             ",
      "for ccmt in ['#', '\"']                                                      ",
      "  let g:easy_align_delimiters[ccmt] = {'pattern': ccmt,                      ",
      "        \\ 'ignore_groups':    ['String'],                                   ",
      "        \\ 'ignore_unmatched': 0}                                            ",
      "endfor                                                                       "
    ]
  },
  "format_goyo": {
    "config": [
      "\" To Be Figured Out"
    ]
  },
  "format_multi_cursor": {
    "config": [
      "\" Called once right before you start selecting multiple cursors            ",
      "function! Multiple_cursors_before()                                         ",
      "  if exists(':NeoCompleteLock')==2                                          ",
      "    exe 'NeoCompleteLock'                                                   ",
      "  endif                                                                     ",
      "endfunction                                                                 ",
      "\" Called once only when the multiple selection is canceled (default <Esc>) ",
      "function! Multiple_cursors_after()                                          ",
      "  if exists(':NeoCompleteUnlock')==2                                        ",
      "    exe 'NeoCompleteUnlock'                                                 ",
      "  endif                                                                     ",
      "endfunction                                                                 "
    ]
  },
  "format_surround": {
    "config": [
      "\" Nothing To Be Done"
    ]
  },
  "format_vim_origami": {
    "config": [
      "\"let g:OrigamiMap = {                                                                 ",
      "\"  \\ 'Align'            : \"a\",                                                     ",
      "\"  \\ 'Leader'           : \"Z\",                                                     ",
      "\"  \\ 'AlignAll'         : \"A\",                                                     ",
      "\"  \\ 'CommentedOpen'    : \"F\",                                                     ",
      "\"  \\ 'UncommentedOpen'  : \"f\",                                                     ",
      "\"  \\ 'CommentedClose'   : \"C\",                                                     ",
      "\"  \\ 'UncommentedClose' : \"c\",                                                     ",
      "\"  \\ 'Delete'           : \"\",                                                      ",
      "\"  \\ }                                                                               ",
      "let g:OrigamiPadding = 1                                                               ",
      "function! s:Get(var, ...)                                                              ",
      "  \" Description:                                                                      ",
      "  \" Returns the buffer-local variable, global variable or the default value           ",
      "  if exists('b:' . a:var)                                                              ",
      "    return eval('b:' . a:var)                                                          ",
      "  elseif exists('g:' . a:var)                                                          ",
      "    return eval('g:' . a:var)                                                          ",
      "  elseif a:0                                                                           ",
      "    return a:1                                                                         ",
      "  endif                                                                                ",
      "endfunction                                                                            ",
      "function! <SID>DeleteFoldmarker()                                                      ",
      "  \" Description: Remove a foldmarker from the current line                            ",
      "  let l:OrigamiCommentString      =                                                    ",
      "        \\ split(s:Get('OrigamiCommentString', &commentstring), '%s')                  ",
      "  if len(l:OrigamiCommentString) == 0 |                                                ",
      "        \\ let l:OrigamiCommentString = [\"\", \"\"] | endif                           ",
      "  if len(l:OrigamiCommentString) == 1 |                                                ",
      "        \\ call add(l:OrigamiCommentString, \"\")  | endif                             ",
      "  let l:line = getline('.')                                                            ",
      "  let l:fmr  = split( &foldmarker, ',' )                                               ",
      "  let l:line =                                                                         ",
      "    \\ substitute(l:line,                                                              ",
      "    \\ '\\s*\\(' . escape(l:OrigamiCommentString[0], '*')                              ",
      "    \\ . '\\)\\?\\s*\\(' . l:fmr[0] . '\\|' . l:fmr[1] . '\\)'                         ",
      "    \\ . '\\(\\d*\\)\\s*\\(' . escape(l:OrigamiCommentString[1], '*') . '\\)\\?\\s*$', ",
      "    \\ '', \"\" )                                                                      ",
      "  call setline('.', l:line )                                                           ",
      "endfunction                                                                            ",
      "nnoremap <silent>ZD :call <SID>DeleteFoldmarker()<CR>                                  "
    ]
  },
  "githelpers_fugitive": {
    "config": []
  },
  "githelpers_gitgutter": {
    "config": [
      "let g:gitgutter_signs    = 0                                                   ",
      "let g:gitgutter_realtime = 0                                                   ",
      "if s:running_unix                                                              ",
      "    let g:gitgutter_sign_added            = \"\\u27F9\"  \" Default: +         ",
      "    let g:gitgutter_sign_removed          = \"\\u27F8\"  \" Default: _         ",
      "    let g:gitgutter_sign_modified         = \"\\u27Fa\"  \" Default: ~         ",
      "    let g:gitgutter_sign_modified_removed = \"\\u2b45\"  \" Default: _~        ",
      "endif                                                                          ",
      "call gitgutter#disable()                                                       ",
      "nnoremap <F3> :GitGutterToggle<CR> \\| :GitGutterLineHighlightsToggle<CR>      ",
      "let g:gitgutter_map_keys = 0                                                   ",
      "if has(\"gui_running\") && g:local_settings_place == \"home\"                  ",
      "    nmap <leader>ö <plug>GitGutterNextHunk                                     ",
      "    nmap <leader>ä <plug>GitGutterPrevHunk                                     ",
      "elseif  g:local_settings_place == \"home\"                                     ",
      "    nmap <A-ä> <plug>GitGutterPrevHunk                                         ",
      "    nmap <A-ö> <plug>GitGutterNextHunk                                         ",
      "endif                                                                          "
    ]
  },
  "gui_airline": {
    "config": [
      "\" Symbols:                                                             ",
      "if s:running_unix                                                       ",
      "  if !exists('g:airline_symbols')                                       ",
      "    let g:airline_symbols = {}                                          ",
      "    \" Airline Symbols:                                                 ",
      "    let g:airline_left_sep         = \"\\u2B80\"                        ",
      "    let g:airline_left_alt_sep     = \"\\u2B81\"                        ",
      "    let g:airline_right_sep        = \"\\u2B82\"                        ",
      "    let g:airline_right_alt_sep    = \"\\u2B83\"                        ",
      "    let g:airline_symbols.branch   = \"\\u2B60\"                        ",
      "    let g:airline_symbols.readonly = \"\\u2B64\"                        ",
      "    let g:airline_symbols.linenr   = \"\\u2B61\"                        ",
      "    let g:airline_ft_sym           = \"\\u2B62\\u2B63 \"                ",
      "    \" Tabline Addon Information:                                       ",
      "    let g:airline#extensions#tabline#left_sep     = \"\\u2B80\"         ",
      "    let g:airline#extensions#tabline#left_alt_sep = \"\\u2B81\"         ",
      "    let g:airline#extensions#tabline#fnamemod     = ':t'                ",
      "    let g:airline#extensions#tabline#enabled      = 1                   ",
      "  endif                                                                 ",
      "else                                                                    ",
      "  if !exists('g:airline_symbols')                                       ",
      "    let g:airline_symbols = {}                                          ",
      "    \" Airline Symbols:                                                 ",
      "    let g:airline_left_sep         = ''                                 ",
      "    let g:airline_left_alt_sep     = ''                                 ",
      "    let g:airline_right_sep        = ''                                 ",
      "    let g:airline_right_alt_sep    = ''                                 ",
      "    let g:airline_symbols.branch   = 'µ'                                ",
      "    let g:airline_symbols.readonly = 'ß'                                ",
      "    let g:airline_symbols.linenr   = 'ln'                               ",
      "    let g:airline_ft_sym           = 'FT '                              ",
      "    \" Tabline Addon Information:                                       ",
      "    let g:airline#extensions#tabline#left_sep     = ''                  ",
      "    let g:airline#extensions#tabline#left_alt_sep = ''                  ",
      "    let g:airline#extensions#tabline#fnamemod     = ':t'                ",
      "    let g:airline#extensions#tabline#enabled      = 1                   ",
      "  endif                                                                 ",
      "endif                                                                   ",
      "\" Theme:                                                               ",
      "let g:airline_theme = \"powerlineish\"                                  ",
      "\" Initializing Airiline:                                               ",
      "function! s:AirlineSettings()                                           ",
      "  \" Section: MODE > B > C > gutter> X > Y > Z > Whitespace             ",
      "  let g:airline_section_c = airline#section#create(['%>',               ",
      "                       \\   'file', '  ', 'readonly'])                  ",
      "  \" let g:airline_section_x = airline#section#create_right(['tagbar']) ",
      "  let g:airline_section_x = ''                                          ",
      "  let g:airline_section_y = airline#section#create([                    ",
      "                       \\ g:airline_ft_sym . '%{&ft}'])                 ",
      "  let g:airline_section_b = airline#section#create([                    ",
      "                       \\  '%{strftime(\"%d %b %Y %H:%M \")}',          ",
      "                       \\  'hunks','branch'])                           ",
      "endfunction                                                             ",
      "autocmd VimEnter * call s:AirlineSettings()                             "
    ]
  },
  "gui_tagbar": {
    "config": [
      "nnoremap <leader>tg :TagbarOpen<CR>                                ",
      "nnoremap       <F7> :TagbarToggle<CR>                              ",
      "if s:running_windows                                               ",
      "   let g:tagbar_ctags_bin = expand(\"$VIM/vimfiles/local_bundle\". ",
      "                           \\   \"/ctags58/\") . \"ctags.exe\"     ",
      "endif                                                              ",
      "let g:tagbar_sort      = 0                                         "
    ]
  },
  "lang_cpp_clighter": {
    "config": [
      "\" To Be Decided"
    ]
  },
  "lang_cpp_enhanced_highlight": {
    "config": [
      "\" Remember to have vim-shell with win for async!                                ",
      "let &tags                      = expand(s:vimfiles . 'temp/TAGS/')  . ','        ",
      "let g:easytags_async           = 1                                               ",
      "let g:easytags_auto_highlight  = 1                                               ",
      "let g:easytags_events          = ['BufWritePost']                                ",
      "let g:easytags_resolve_links   = 1                                               ",
      "\" Remove in favour of Performance                                               ",
      "\"let g:easytags_syntax_keyword  = 'always'                                      ",
      "let g:easytags_include_members = 1                                               ",
      "\" let g:easytags_by_filetype  = expand(s:vimfiles . 'temp/TAGS/')               "
    ]
  },
  "linter_syntastic": {
    "config": [
      "\" Syntastic Eclim Problems                               ",
      "let g:EclimFileTypeValidate = 0                           ",
      "let g:EclimPythonValidate   = 0                           ",
      "\" Better sign interface symbol                           ",
      "let g:syntastic_auto_loc_list            = 1              ",
      "let g:syntastic_always_populate_loc_list = 1              ",
      "let g:syntastic_check_on_open            = 1              ",
      "let g:syntastic_error_symbol         = \"\\u2717\\u2717\" ",
      "let g:syntastic_style_error_symbol   = \"\\u2652\\u2652\" ",
      "let g:syntastic_warning_symbol       = \"\\u264E\\u264E\" ",
      "let g:syntastic_style_warning_symbol = \"\\u2630\\u2630\" ",
      "\" Python Lint                                            ",
      "let g:syntastic_python_pylint_post_args = \"--rcfile=\" . ",
      "         \\ expand(s:vimfiles . \"vimrcs/pylint_std.rc\") ",
      "\" Syntastic Debug Info                                   ",
      "\" let g:syntastic_debug = 1                              ",
      "\" let g:syntastic_debug_file='~/some.log'                ",
      "\" Syntastic Lisp Setting                                 ",
      "\" let g:syntastic_lisp_clisp_post_args = \"-o /tmp/\"    ",
      "\" Making Syntastic Passive and TO activate it with <F5>  ",
      "\"augroup SYNTAS_CHECK                                    ",
      "\"  au!                                                   ",
      "\"  autocmd BufRead,BufNewFile,BufWinEnter *              ",
      "\"             \\   let b:syntastic_check_is_executed = 0 ",
      "\"augroup end                                             ",
      "\"fun! TOggleSyntasticCHECK()                             ",
      "\"  if b:syntastic_check_is_executed == 0                 ",
      "\"    let b:syntastic_check_is_executed = 1               ",
      "\"    silent! SyntasticCheck                              ",
      "\"    if len(getloclist(0)) == 0                          ",
      "\"        echom 'NO ERRORS'                               ",
      "\"    endif                                               ",
      "\"  else                                                  ",
      "\"    let b:syntastic_check_is_executed = 0               ",
      "\"    silent! SyntasticReset                              ",
      "\"  endif                                                 ",
      "\"endf                                                    ",
      "let g:syntastic_mode_map = { 'mode': 'passive',           ",
      "                   \\ 'active_filetypes': [],             ",
      "                   \\ 'passive_filetypes': [] }           ",
      "nnoremap <silent><F5> :SyntasticToggleMode<CR>            "
    ]
  },
  "navigate_nerdtree": {
    "config": [
      "let NERDTreeIgnore = ['\\.beam$', '\\.pyc$', 'ebin$', ",
      "   \\  '\\.obj$', '\\.out$', '\\.aux$', '\\.pdf$']    ",
      "let NERDChristmasTree = 1                             ",
      "let NERDTreeMinimalUI = 1                             ",
      "let NERDTreeDirArrows = 0                             ",
      "nnoremap <F10> :NERDTreeToggle<CR>                    "
    ]
  },
  "snippet_honza": {
    "config": []
  },
  "snippet_ultisnips": {
    "config": [
      "let g:snips_author = \"Doom\"                                           ",
      "let g:snips_email  = \"kipintouch29@gmail.com\"                         ",
      "let g:snips_github = \"kipintouch29\"                                   ",
      "\" Required by UltiSnipsEdit: command                                   ",
      "let g:UltiSnipsSnippetsDir         = expand(s:vimfiles. 'UltiSnips/')   ",
      "\" Search path for snippets                                             ",
      "let g:UltiSnipsSnippetDirectories  = [\"UltiSnips\",                    ",
      "                               \\  expand(s:vimfiles. 'UltiSnips/')]    ",
      "let g:UltiSnipsEditSplit           = \"horizontal\"                     ",
      "let g:UltiSnipsListSnippets        = \"<F4>\"                           ",
      "let g:UltiSnipsExpandTrigger       = \"<C-j>\"                          ",
      "let g:UltiSnipsJumpForwardTrigger  = \"<C-j>\"                          ",
      "let g:UltiSnipsJumpBackwardTrigger = \"<C-k>\"                          "
    ]
  },
  "unite_airline": {
    "config": [
      "  nnoremap <silent> [unite]a  :Unite -auto-preview                          ",
      "                        \\   -buffer-name=airline_themes airline_themes<cr> "
    ]
  },
  "unite_colors": {
    "config": [
      "  nnoremap <silent> [unite]c  :Unite -auto-preview                          ",
      "                        \\   -buffer-name=colorscheme colorscheme<cr>       "
    ]
  },
  "unite_core": {
    "config": [
      "\" Basics                                                                     ",
      "  call unite#filters#matcher_default#use(['matcher_fuzzy'])                   ",
      "  call unite#filters#sorter_default#use(['sorter_rank'])                      ",
      "  call unite#custom#source('line,outline','matchers','matcher_fuzzy')         ",
      "  call unite#custom_source('file_rec,file_rec/async,file_mru,' .              ",
      "         \\ 'file,buffer,grep',                                               ",
      "         \\ 'ignore_pattern', join([                                          ",
      "         \\   '\\.git/', '\\.pyc',   '\\.o', '\\.beam', '\\.pyc',             ",
      "         \\   '\\.ebin', '\\.dll', '\\.obj', '\\.bak', '\\.exe',              ",
      "         \\    '\\.pyc', '\\.jpg', '\\.gif',  '\\.png'], '\\|'))              ",
      "  call unite#custom#profile('default', 'context', {                           ",
      "       \\     'start_insert':       1,                                        ",
      "       \\        'direction': 'below',                                        ",
      "       \\        'winheight':      10,                                        ",
      "       \\ 'prompt_direction': 'below',                                        ",
      "       \\   'prompt_visible':       1,                                        ",
      "       \\           'prompt': '» '                                            ",
      "       \\ })                                                                  ",
      "\" Unite Variables:                                                           ",
      "  let g:unite_force_overwrite_statusline = 0                                  ",
      "  let g:unite_data_directory             = expand(s:vimfiles .                ",
      "                                       \\  \"temp/cache/unite/\")             ",
      "  let g:unite_source_history_yank_enable = 1                                  ",
      "  let g:unite_source_rec_max_cache_files = 5000                               ",
      "  if executable('ack')                                                        ",
      "    let g:unite_source_grep_command       = 'ack'                             ",
      "    let g:unite_source_rec_async_command  = 'ack'                             ",
      "    let g:unite_source_grep_default_opts  = '-iw --no-heading --no-color'     ",
      "    let g:unite_source_grep_recursive_opt = ''                                ",
      "  endif                                                                       ",
      "\" Unite MAPPINGS:                                                            ",
      "  nmap <leader><space> [unite]                                                ",
      "  nnoremap [unite] <nop>                                                      ",
      "  autocmd FileType unite call s:unite_settings()                              ",
      "  function! s:unite_settings()                                                ",
      "    nmap <buffer> <C-Space> <plug>(unite_restart)                             ",
      "    nmap <buffer> <ESC>     <plug>(unite_exit)                                ",
      "    nmap <buffer> Q         <Plug>(unite_exit)                                ",
      "    imap <buffer> <Tab>     <Plug>(unite_skip_next_line)                      ",
      "    imap <buffer> <S-Tab>   <Plug>(unite_skip_previous_line)                  ",
      "  endfunction                                                                 ",
      "  if s:running_windows                                                        ",
      "    nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize         ",
      "               \\  -buffer-name=mixed file_rec:!                              ",
      "               \\  buffer file_mru bookmark<cr><c-u>                          ",
      "    nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize               ",
      "               \\  -buffer-name=files file_rec:!<cr><c-u>                     ",
      "  else                                                                        ",
      "    nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize         ",
      "               \\  -buffer-name=mixed file_rec/async:!                        ",
      "               \\  buffer file_mru bookmark<cr><c-u>                          ",
      "    nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize               ",
      "               \\  -buffer-name=files file_rec/async:!<cr><c-u>               ",
      "  endif                                                                       ",
      "  nnoremap <silent> [unite]y  :<C-U>Unite -buffer-name=yanks history/yank<cr> ",
      "  nnoremap <silent> [unite]l  :<C-U>Unite -auto-resize                        ",
      "               \\   -buffer-name=line line<cr>                                ",
      "  nnoremap <silent> [unite]b  :<C-U>Unite -auto-resize                        ",
      "               \\   -buffer-name=buffers buffer<cr>                           ",
      "  nnoremap <silent> [unite]m  :<C-U>Unite -auto-resize                        ",
      "               \\   -buffer-name=mappings mapping<cr>                         ",
      "  nnoremap <silent> [unite]s  :<C-U>Unite -quick-match buffer<cr>             "
    ]
  },
  "unite_codesearch": {
    "config": [
      "let g:unite_source_codesearch_command     = expand('~/.vim/local/codesearch/csearch') ",
      "let g:unite_source_codesearch_ignore_case = 1                                         ",
      "if ((g:local_settings_place == \"home\") || (g:local_settings_place == \"work\"))     ",
      "  nnoremap <silent> [unite]g                                                          ",
      "  \\ :<C-U>Unite -auto-resize -buffer-name=GREP codesearch<CR>                        ",
      "else                                                                                  ",
      "  nnoremap <silent> [unite]g                                                          ",
      "  \\ :<C-U>Unite -auto-resize -buffer-name=GREP grep:.<CR>                            ",
      "end                                                                                   "
    ]
  },
  "unite_mru": {
    "config": [
      "  nnoremap <silent> [unite]e :Unite -buffer-name=recent file_mru<cr>       "
    ]
  },
  "unite_outline": {
    "config": [
      "nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>"
    ]
  },
  "unite_vimproc": {
    "config": [
    ]
  },
  "vim_textobj_user": {
    "config": [
    ]
  },
  "vim_textobj_indent": {
    "config": [
    ]
  },
  "vim_textobj_comment": {
    "config": [
    ]
  },
  "vim_textobj_wellle_targets":   {
    "config": [
    ]
  }
}
